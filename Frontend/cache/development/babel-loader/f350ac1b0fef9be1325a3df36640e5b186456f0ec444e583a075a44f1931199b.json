{"ast":null,"code":"var _jsxFileName = \"/Users/hidde/Documents/Landingpage/components/AnimatedLines.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEGMENT_LENGTH = 20;\nconst SNAKE_LENGTH = 12;\nconst SPEED = 3;\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  const createSnake = () => {\n    const dots = Array(SNAKE_LENGTH).fill(0).map(() => ({\n      x: new Animated.Value(-SEGMENT_LENGTH),\n      y: new Animated.Value(0)\n    }));\n    return {\n      dots,\n      direction: {\n        x: 1,\n        y: 0\n      },\n      position: {\n        x: -SEGMENT_LENGTH,\n        y: Math.random() * screenHeight * 0.6 + screenHeight * 0.2\n      },\n      path: []\n    };\n  };\n  const [snakes] = useState([createSnake(), createSnake(), createSnake()]);\n  useEffect(() => {\n    const moveSnakes = () => {\n      snakes.forEach(snake => {\n        snake.position.x += snake.direction.x * SPEED;\n        snake.position.y += snake.direction.y * SPEED;\n        snake.path.push(Object.assign({}, snake.position));\n        if (snake.path.length > SNAKE_LENGTH) {\n          snake.path.shift();\n        }\n        if (Math.random() < 0.005) {\n          const directions = [{\n            x: 1,\n            y: 0\n          }, {\n            x: 0,\n            y: 1\n          }, {\n            x: 0,\n            y: -1\n          }];\n          snake.direction = directions[Math.floor(Math.random() * directions.length)];\n        }\n        if (snake.position.x > screenWidth + SEGMENT_LENGTH) {\n          snake.position.x = -SEGMENT_LENGTH;\n          snake.path = [];\n        }\n        snake.dots.forEach((dot, index) => {\n          const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n          dot.x.setValue(pathPoint.x);\n          dot.y.setValue(pathPoint.y);\n        });\n      });\n      requestAnimationFrame(moveSnakes);\n    };\n    moveSnakes();\n  }, []);\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: snakes.map((snake, snakeIndex) => _jsxDEV(View, {\n      children: snake.dots.map((dot, index) => _jsxDEV(Animated.View, {\n        style: [styles.dot, {\n          opacity: (SNAKE_LENGTH - index) / SNAKE_LENGTH * 0.3,\n          transform: [{\n            translateX: dot.x\n          }, {\n            translateY: dot.y\n          }]\n        }]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this))\n    }, snakeIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none'\n  },\n  dot: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    backgroundColor: '#F4E409',\n    borderRadius: 2\n  }\n});\nexport default AnimatedLines;","map":{"version":3,"names":["React","useEffect","useRef","useState","View","Animated","StyleSheet","Dimensions","jsxDEV","_jsxDEV","SEGMENT_LENGTH","SNAKE_LENGTH","SPEED","AnimatedLines","screenWidth","get","width","screenHeight","height","createSnake","dots","Array","fill","map","x","Value","y","direction","position","Math","random","path","snakes","moveSnakes","forEach","snake","push","Object","assign","length","shift","directions","floor","dot","index","pathPoint","max","setValue","requestAnimationFrame","style","styles","container","children","snakeIndex","opacity","transform","translateX","translateY","fileName","_jsxFileName","lineNumber","columnNumber","create","top","left","right","bottom","pointerEvents","backgroundColor","borderRadius"],"sources":["/Users/hidde/Documents/Landingpage/components/AnimatedLines.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { View, Animated, StyleSheet, Dimensions } from 'react-native';\n\nconst SEGMENT_LENGTH = 20;  // Distance between dots\nconst SNAKE_LENGTH = 12;    // Number of dots in each line\nconst SPEED = 3;           // Movement speed\n\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  \n  // Create multiple snakes\n  const createSnake = () => {\n    const dots = Array(SNAKE_LENGTH).fill(0).map(() => ({\n      x: new Animated.Value(-SEGMENT_LENGTH),\n      y: new Animated.Value(0),\n    }));\n    return {\n      dots,\n      direction: { x: 1, y: 0 },\n      position: { x: -SEGMENT_LENGTH, y: Math.random() * screenHeight * 0.6 + screenHeight * 0.2 },\n      path: [],\n    };\n  };\n\n  const [snakes] = useState([\n    createSnake(),\n    createSnake(),\n    createSnake(),\n  ]);\n\n  useEffect(() => {\n    const moveSnakes = () => {\n      snakes.forEach(snake => {\n        // Update head position\n        snake.position.x += snake.direction.x * SPEED;\n        snake.position.y += snake.direction.y * SPEED;\n\n        // Store path point\n        snake.path.push({ ...snake.position });\n        if (snake.path.length > SNAKE_LENGTH) {\n          snake.path.shift();\n        }\n\n        // Change direction randomly\n        if (Math.random() < 0.005) {  // Chance to change direction\n          const directions = [\n            { x: 1, y: 0 },   // right\n            { x: 0, y: 1 },   // down\n            { x: 0, y: -1 },  // up\n          ];\n          snake.direction = directions[Math.floor(Math.random() * directions.length)];\n        }\n\n        // Reset if off screen\n        if (snake.position.x > screenWidth + SEGMENT_LENGTH) {\n          snake.position.x = -SEGMENT_LENGTH;\n          snake.path = [];\n        }\n\n        // Update dot positions\n        snake.dots.forEach((dot, index) => {\n          const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n          dot.x.setValue(pathPoint.x);\n          dot.y.setValue(pathPoint.y);\n        });\n      });\n\n      requestAnimationFrame(moveSnakes);\n    };\n\n    moveSnakes();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      {snakes.map((snake, snakeIndex) => (\n        <View key={snakeIndex}>\n          {snake.dots.map((dot, index) => (\n            <Animated.View\n              key={index}\n              style={[\n                styles.dot,\n                {\n                  opacity: (SNAKE_LENGTH - index) / SNAKE_LENGTH * 0.3,\n                  transform: [\n                    { translateX: dot.x },\n                    { translateY: dot.y },\n                  ],\n                },\n              ]}\n            />\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none',\n  },\n  dot: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    backgroundColor: '#F4E409',\n    borderRadius: 2,\n  },\n});\n\nexport default AnimatedLines; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}