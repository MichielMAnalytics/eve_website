{"ast":null,"code":"var _jsxFileName = \"/Users/hidde/Documents/Landingpage/components/AnimatedLines.js\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEGMENT_LENGTH = 37.5;\nconst BASE_SNAKE_LENGTH = 52;\nconst BASE_SPEED = 6;\nconst SNAKE_LENGTH = 35;\nconst MAX_TURNS = 3;\nconst MIN_SPAWN_DELAY = 2000;\nconst MAX_SPAWN_DELAY = 5000;\nconst MAX_ACTIVE_SNAKES = 8;\nconst MIN_ACTIVE_SNAKES = 3;\nconst LENGTH_VARIATION = 20;\nconst SPEED_VARIATION = 3;\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  const [snakes, setSnakes] = useState([]);\n  const animationFrameRef = useRef();\n  const snakesRef = useRef([]);\n  const createSnake = useCallback(() => ({\n    id: Math.random(),\n    dots: Array(BASE_SNAKE_LENGTH + Math.floor(Math.random() * LENGTH_VARIATION)).fill(0).map(() => ({\n      x: new Animated.Value(-SEGMENT_LENGTH),\n      y: new Animated.Value(0)\n    })),\n    direction: {\n      x: 1,\n      y: 0\n    },\n    position: {\n      x: -SEGMENT_LENGTH,\n      y: Math.random() * screenHeight * 0.8 + screenHeight * 0.1\n    },\n    path: [],\n    turnsRemaining: MAX_TURNS,\n    lastTurnX: -SEGMENT_LENGTH,\n    speed: BASE_SPEED + Math.random() * SPEED_VARIATION\n  }), [screenHeight]);\n  useEffect(() => {\n    const initialSnakes = [createSnake(), createSnake(), createSnake()];\n    snakesRef.current = initialSnakes;\n    setSnakes(initialSnakes);\n  }, [createSnake]);\n  const moveSnakes = useCallback(() => {\n    if (!snakesRef.current) return;\n    const updatedSnakes = snakesRef.current.map(snake => {\n      snake.position.x += snake.direction.x * snake.speed;\n      snake.position.y += snake.direction.y * snake.speed;\n      snake.path.push(Object.assign({}, snake.position));\n      if (snake.path.length > SNAKE_LENGTH) {\n        snake.path.shift();\n      }\n      const distanceSinceLastTurn = Math.abs(snake.position.x - snake.lastTurnX);\n      if (snake.turnsRemaining > 0 && distanceSinceLastTurn > SEGMENT_LENGTH * 8 && Math.random() < 0.003) {\n        const directions = [{\n          x: 1,\n          y: 0\n        }, {\n          x: 0,\n          y: 1\n        }, {\n          x: 0,\n          y: -1\n        }];\n        const availableDirections = directions.filter(d => d.x !== snake.direction.x || d.y !== snake.direction.y);\n        snake.direction = availableDirections[Math.floor(Math.random() * availableDirections.length)];\n        snake.turnsRemaining--;\n        snake.lastTurnX = snake.position.x;\n      }\n      snake.dots.forEach((dot, index) => {\n        const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n        dot.x.setValue(pathPoint.x);\n        dot.y.setValue(pathPoint.y);\n      });\n      return snake;\n    });\n    snakesRef.current = updatedSnakes;\n    setSnakes(updatedSnakes);\n  }, []);\n  useEffect(() => {\n    let isActive = true;\n    const animate = () => {\n      if (!isActive) return;\n      moveSnakes();\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      isActive = false;\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [moveSnakes]);\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: snakes.map(snake => _jsxDEV(View, {\n      children: snake.dots.map((dot, index) => _jsxDEV(Animated.View, {\n        style: [styles.dot, {\n          opacity: (SNAKE_LENGTH - index) / SNAKE_LENGTH * 0.5,\n          transform: [{\n            translateX: dot.x\n          }, {\n            translateY: dot.y\n          }]\n        }]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this))\n    }, snake.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none',\n    zIndex: 1\n  },\n  dot: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    backgroundColor: '#F4E409',\n    borderRadius: 2\n  }\n});\nexport default AnimatedLines;","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","View","Animated","StyleSheet","Dimensions","jsxDEV","_jsxDEV","SEGMENT_LENGTH","BASE_SNAKE_LENGTH","BASE_SPEED","SNAKE_LENGTH","MAX_TURNS","MIN_SPAWN_DELAY","MAX_SPAWN_DELAY","MAX_ACTIVE_SNAKES","MIN_ACTIVE_SNAKES","LENGTH_VARIATION","SPEED_VARIATION","AnimatedLines","screenWidth","get","width","screenHeight","height","snakes","setSnakes","animationFrameRef","snakesRef","createSnake","id","Math","random","dots","Array","floor","fill","map","x","Value","y","direction","position","path","turnsRemaining","lastTurnX","speed","initialSnakes","current","moveSnakes","updatedSnakes","snake","push","Object","assign","length","shift","distanceSinceLastTurn","abs","directions","availableDirections","filter","d","forEach","dot","index","pathPoint","max","setValue","isActive","animate","requestAnimationFrame","cancelAnimationFrame","style","styles","container","children","opacity","transform","translateX","translateY","fileName","_jsxFileName","lineNumber","columnNumber","create","top","left","right","bottom","pointerEvents","zIndex","backgroundColor","borderRadius"],"sources":["/Users/hidde/Documents/Landingpage/components/AnimatedLines.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { View, Animated, StyleSheet, Dimensions } from 'react-native';\n\nconst SEGMENT_LENGTH = 37.5;\nconst BASE_SNAKE_LENGTH = 52;\nconst BASE_SPEED = 6;\nconst SNAKE_LENGTH = 35;\nconst MAX_TURNS = 3;\nconst MIN_SPAWN_DELAY = 2000;\nconst MAX_SPAWN_DELAY = 5000;\nconst MAX_ACTIVE_SNAKES = 8;\nconst MIN_ACTIVE_SNAKES = 3;\n\nconst LENGTH_VARIATION = 20;\nconst SPEED_VARIATION = 3;\n\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  const [snakes, setSnakes] = useState([]);\n  const animationFrameRef = useRef();\n  const snakesRef = useRef([]);\n\n  const createSnake = useCallback(() => ({\n    id: Math.random(),\n    dots: Array(BASE_SNAKE_LENGTH + Math.floor(Math.random() * LENGTH_VARIATION)).fill(0).map(() => ({\n      x: new Animated.Value(-SEGMENT_LENGTH),\n      y: new Animated.Value(0),\n    })),\n    direction: { x: 1, y: 0 },\n    position: { x: -SEGMENT_LENGTH, y: Math.random() * screenHeight * 0.8 + screenHeight * 0.1 },\n    path: [],\n    turnsRemaining: MAX_TURNS,\n    lastTurnX: -SEGMENT_LENGTH,\n    speed: BASE_SPEED + (Math.random() * SPEED_VARIATION),\n  }), [screenHeight]);\n\n  // Initialize snakes\n  useEffect(() => {\n    const initialSnakes = [createSnake(), createSnake(), createSnake()];\n    snakesRef.current = initialSnakes;\n    setSnakes(initialSnakes);\n  }, [createSnake]);\n\n  const moveSnakes = useCallback(() => {\n    if (!snakesRef.current) return;\n\n    const updatedSnakes = snakesRef.current.map(snake => {\n      // Update head position\n      snake.position.x += snake.direction.x * snake.speed;\n      snake.position.y += snake.direction.y * snake.speed;\n\n      // Store path point\n      snake.path.push({ ...snake.position });\n      if (snake.path.length > SNAKE_LENGTH) {\n        snake.path.shift();\n      }\n\n      // Change direction with limitations\n      const distanceSinceLastTurn = Math.abs(snake.position.x - snake.lastTurnX);\n      if (snake.turnsRemaining > 0 && \n          distanceSinceLastTurn > SEGMENT_LENGTH * 8 &&\n          Math.random() < 0.003) {\n        const directions = [\n          { x: 1, y: 0 },\n          { x: 0, y: 1 },\n          { x: 0, y: -1 },\n        ];\n        const availableDirections = directions.filter(d => \n          d.x !== snake.direction.x || d.y !== snake.direction.y\n        );\n        snake.direction = availableDirections[Math.floor(Math.random() * availableDirections.length)];\n        snake.turnsRemaining--;\n        snake.lastTurnX = snake.position.x;\n      }\n\n      // Update dot positions\n      snake.dots.forEach((dot, index) => {\n        const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n        dot.x.setValue(pathPoint.x);\n        dot.y.setValue(pathPoint.y);\n      });\n\n      return snake;\n    });\n\n    snakesRef.current = updatedSnakes;\n    setSnakes(updatedSnakes);\n  }, []);\n\n  // Animation loop\n  useEffect(() => {\n    let isActive = true;\n\n    const animate = () => {\n      if (!isActive) return;\n      moveSnakes();\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      isActive = false;\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [moveSnakes]);\n\n  return (\n    <View style={styles.container}>\n      {snakes.map((snake) => (\n        <View key={snake.id}>\n          {snake.dots.map((dot, index) => (\n            <Animated.View\n              key={index}\n              style={[\n                styles.dot,\n                {\n                  opacity: (SNAKE_LENGTH - index) / SNAKE_LENGTH * 0.5, // Increased opacity\n                  transform: [\n                    { translateX: dot.x },\n                    { translateY: dot.y }\n                  ]\n                },\n              ]}\n            />\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none',\n    zIndex: 1, // Added zIndex\n  },\n  dot: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    backgroundColor: '#F4E409',\n    borderRadius: 2,\n  },\n});\n\nexport default AnimatedLines; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}