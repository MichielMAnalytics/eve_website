{"ast":null,"code":"var _jsxFileName = \"/Users/hidde/Documents/Landingpage/components/AnimatedLines.js\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SNAKE_CONFIG = {\n  SEGMENT_LENGTH: 37.5,\n  BASE_LENGTH: 52,\n  LENGTH: 35,\n  BASE_SPEED: 6,\n  MAX_TURNS: 3,\n  LENGTH_VARIATION: 20,\n  SPEED_VARIATION: 3,\n  FPS: 30,\n  MIN_SNAKES: 3,\n  MAX_SNAKES: 8\n};\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  const [snakes, setSnakes] = useState([]);\n  const animationFrameRef = useRef();\n  const lastUpdateTime = useRef(0);\n  const snakesRef = useRef([]);\n  const frameDelay = 1000 / SNAKE_CONFIG.FPS;\n  const createSnake = useCallback(() => ({\n    id: Math.random(),\n    dots: Array(SNAKE_CONFIG.BASE_LENGTH + Math.floor(Math.random() * SNAKE_CONFIG.LENGTH_VARIATION)).fill(0).map(() => ({\n      x: new Animated.Value(-SNAKE_CONFIG.SEGMENT_LENGTH),\n      y: new Animated.Value(0)\n    })),\n    direction: {\n      x: 1,\n      y: 0\n    },\n    position: {\n      x: -SNAKE_CONFIG.SEGMENT_LENGTH,\n      y: Math.random() * screenHeight * 0.8 + screenHeight * 0.1\n    },\n    path: [],\n    turnsRemaining: SNAKE_CONFIG.MAX_TURNS,\n    lastTurnX: -SNAKE_CONFIG.SEGMENT_LENGTH,\n    speed: SNAKE_CONFIG.BASE_SPEED + Math.random() * SNAKE_CONFIG.SPEED_VARIATION\n  }), [screenHeight]);\n  useEffect(() => {\n    if (snakesRef.current.length === 0) {\n      const initialSnakes = Array(SNAKE_CONFIG.MIN_SNAKES).fill(0).map(() => createSnake());\n      snakesRef.current = initialSnakes;\n      setSnakes(initialSnakes);\n    }\n  }, [createSnake]);\n  const moveSnakes = useCallback(() => {\n    const currentTime = Date.now();\n    if (currentTime - lastUpdateTime.current < frameDelay) {\n      return;\n    }\n    lastUpdateTime.current = currentTime;\n    const updatedSnakes = snakesRef.current.map(snake => {\n      if (snake.position.x > screenWidth + SNAKE_CONFIG.SEGMENT_LENGTH) {\n        return createSnake();\n      }\n      snake.position.x += snake.direction.x * snake.speed;\n      snake.position.y += snake.direction.y * snake.speed;\n      snake.path.push(Object.assign({}, snake.position));\n      if (snake.path.length > SNAKE_CONFIG.LENGTH) {\n        snake.path.shift();\n      }\n      const distanceSinceLastTurn = Math.abs(snake.position.x - snake.lastTurnX);\n      if (snake.turnsRemaining > 0 && distanceSinceLastTurn > SNAKE_CONFIG.SEGMENT_LENGTH * 8 && Math.random() < 0.001) {\n        const directions = [{\n          x: 1,\n          y: 0\n        }, {\n          x: 0,\n          y: 1\n        }, {\n          x: 0,\n          y: -1\n        }];\n        const availableDirections = directions.filter(d => d.x !== snake.direction.x || d.y !== snake.direction.y);\n        snake.direction = availableDirections[Math.floor(Math.random() * availableDirections.length)];\n        snake.turnsRemaining--;\n        snake.lastTurnX = snake.position.x;\n      }\n      snake.dots.forEach((dot, index) => {\n        const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n        dot.x.setValue(pathPoint.x);\n        dot.y.setValue(pathPoint.y);\n      });\n      return snake;\n    });\n    while (updatedSnakes.length < SNAKE_CONFIG.MIN_SNAKES) {\n      updatedSnakes.push(createSnake());\n    }\n    snakesRef.current = updatedSnakes;\n    setSnakes(updatedSnakes);\n  }, [createSnake, screenWidth]);\n  useEffect(() => {\n    let isActive = true;\n    const animate = () => {\n      if (!isActive) return;\n      moveSnakes();\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      isActive = false;\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [moveSnakes]);\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: snakes.map(snake => _jsxDEV(View, {\n      children: snake.dots.map((dot, index) => _jsxDEV(Animated.View, {\n        style: [styles.dot, {\n          opacity: Math.max(0.4, (SNAKE_CONFIG.LENGTH - index) / SNAKE_CONFIG.LENGTH),\n          transform: [{\n            translateX: dot.x\n          }, {\n            translateY: dot.y\n          }]\n        }]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this))\n    }, snake.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none',\n    zIndex: 0\n  },\n  dot: {\n    position: 'absolute',\n    width: 3,\n    height: 3,\n    backgroundColor: '#F4E409',\n    borderRadius: 1.5,\n    opacity: 0.8\n  }\n});\nexport default AnimatedLines;","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","View","Animated","StyleSheet","Dimensions","jsxDEV","_jsxDEV","SNAKE_CONFIG","SEGMENT_LENGTH","BASE_LENGTH","LENGTH","BASE_SPEED","MAX_TURNS","LENGTH_VARIATION","SPEED_VARIATION","FPS","MIN_SNAKES","MAX_SNAKES","AnimatedLines","screenWidth","get","width","screenHeight","height","snakes","setSnakes","animationFrameRef","lastUpdateTime","snakesRef","frameDelay","createSnake","id","Math","random","dots","Array","floor","fill","map","x","Value","y","direction","position","path","turnsRemaining","lastTurnX","speed","current","length","initialSnakes","moveSnakes","currentTime","Date","now","updatedSnakes","snake","push","Object","assign","shift","distanceSinceLastTurn","abs","directions","availableDirections","filter","d","forEach","dot","index","pathPoint","max","setValue","isActive","animate","requestAnimationFrame","cancelAnimationFrame","style","styles","container","children","opacity","transform","translateX","translateY","fileName","_jsxFileName","lineNumber","columnNumber","create","top","left","right","bottom","pointerEvents","zIndex","backgroundColor","borderRadius"],"sources":["/Users/hidde/Documents/Landingpage/components/AnimatedLines.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { View, Animated, StyleSheet, Dimensions } from 'react-native';\n\nconst SNAKE_CONFIG = {\n  SEGMENT_LENGTH: 37.5,\n  BASE_LENGTH: 52,\n  LENGTH: 35,\n  BASE_SPEED: 6,\n  MAX_TURNS: 3,\n  LENGTH_VARIATION: 20,\n  SPEED_VARIATION: 3,\n  FPS: 30,\n  MIN_SNAKES: 3,\n  MAX_SNAKES: 8\n};\n\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  const [snakes, setSnakes] = useState([]);\n  const animationFrameRef = useRef();\n  const lastUpdateTime = useRef(0);\n  const snakesRef = useRef([]);\n  const frameDelay = 1000 / SNAKE_CONFIG.FPS;\n\n  const createSnake = useCallback(() => ({\n    id: Math.random(),\n    dots: Array(SNAKE_CONFIG.BASE_LENGTH + Math.floor(Math.random() * SNAKE_CONFIG.LENGTH_VARIATION)).fill(0).map(() => ({\n      x: new Animated.Value(-SNAKE_CONFIG.SEGMENT_LENGTH),\n      y: new Animated.Value(0),\n    })),\n    direction: { x: 1, y: 0 },\n    position: { x: -SNAKE_CONFIG.SEGMENT_LENGTH, y: Math.random() * screenHeight * 0.8 + screenHeight * 0.1 },\n    path: [],\n    turnsRemaining: SNAKE_CONFIG.MAX_TURNS,\n    lastTurnX: -SNAKE_CONFIG.SEGMENT_LENGTH,\n    speed: SNAKE_CONFIG.BASE_SPEED + (Math.random() * SNAKE_CONFIG.SPEED_VARIATION),\n  }), [screenHeight]);\n\n  // Initialize snakes only once\n  useEffect(() => {\n    if (snakesRef.current.length === 0) {\n      const initialSnakes = Array(SNAKE_CONFIG.MIN_SNAKES)\n        .fill(0)\n        .map(() => createSnake());\n      snakesRef.current = initialSnakes;\n      setSnakes(initialSnakes);\n    }\n  }, [createSnake]);\n\n  const moveSnakes = useCallback(() => {\n    const currentTime = Date.now();\n    if (currentTime - lastUpdateTime.current < frameDelay) {\n      return;\n    }\n    \n    lastUpdateTime.current = currentTime;\n\n    const updatedSnakes = snakesRef.current.map(snake => {\n      // Remove snakes that are off screen\n      if (snake.position.x > screenWidth + SNAKE_CONFIG.SEGMENT_LENGTH) {\n        return createSnake();\n      }\n\n      // Update head position\n      snake.position.x += snake.direction.x * snake.speed;\n      snake.position.y += snake.direction.y * snake.speed;\n\n      // Store path point\n      snake.path.push({ ...snake.position });\n      if (snake.path.length > SNAKE_CONFIG.LENGTH) {\n        snake.path.shift();\n      }\n\n      // Change direction\n      const distanceSinceLastTurn = Math.abs(snake.position.x - snake.lastTurnX);\n      if (snake.turnsRemaining > 0 && \n          distanceSinceLastTurn > SNAKE_CONFIG.SEGMENT_LENGTH * 8 &&\n          Math.random() < 0.001) {\n        const directions = [\n          { x: 1, y: 0 },\n          { x: 0, y: 1 },\n          { x: 0, y: -1 },\n        ];\n        const availableDirections = directions.filter(d => \n          d.x !== snake.direction.x || d.y !== snake.direction.y\n        );\n        snake.direction = availableDirections[Math.floor(Math.random() * availableDirections.length)];\n        snake.turnsRemaining--;\n        snake.lastTurnX = snake.position.x;\n      }\n\n      // Update dot positions\n      snake.dots.forEach((dot, index) => {\n        const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n        dot.x.setValue(pathPoint.x);\n        dot.y.setValue(pathPoint.y);\n      });\n\n      return snake;\n    });\n\n    // Ensure minimum number of snakes\n    while (updatedSnakes.length < SNAKE_CONFIG.MIN_SNAKES) {\n      updatedSnakes.push(createSnake());\n    }\n\n    snakesRef.current = updatedSnakes;\n    setSnakes(updatedSnakes);\n  }, [createSnake, screenWidth]);\n\n  useEffect(() => {\n    let isActive = true;\n\n    const animate = () => {\n      if (!isActive) return;\n      moveSnakes();\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      isActive = false;\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [moveSnakes]);\n\n  return (\n    <View style={styles.container}>\n      {snakes.map((snake) => (\n        <View key={snake.id}>\n          {snake.dots.map((dot, index) => (\n            <Animated.View\n              key={index}\n              style={[\n                styles.dot,\n                {\n                  opacity: Math.max(0.4, (SNAKE_CONFIG.LENGTH - index) / SNAKE_CONFIG.LENGTH),\n                  transform: [\n                    { translateX: dot.x },\n                    { translateY: dot.y }\n                  ]\n                },\n              ]}\n            />\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none',\n    zIndex: 0,\n  },\n  dot: {\n    position: 'absolute',\n    width: 3,\n    height: 3,\n    backgroundColor: '#F4E409',\n    borderRadius: 1.5,\n    opacity: 0.8,\n  },\n});\n\nexport default AnimatedLines; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}