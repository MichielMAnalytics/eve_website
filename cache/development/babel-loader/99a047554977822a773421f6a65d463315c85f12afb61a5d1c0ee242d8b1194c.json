{"ast":null,"code":"var _jsxFileName = \"/Users/hidde/Documents/Landingpage/components/AnimatedLines.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEGMENT_LENGTH = 25;\nconst SNAKE_LENGTH = 35;\nconst SPEED = 2.5;\nconst MAX_TURNS = 3;\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  const createSnake = () => {\n    const dots = Array(SNAKE_LENGTH).fill(0).map(() => ({\n      x: new Animated.Value(-SEGMENT_LENGTH),\n      y: new Animated.Value(0)\n    }));\n    return {\n      dots,\n      direction: {\n        x: 1,\n        y: 0\n      },\n      position: {\n        x: -SEGMENT_LENGTH,\n        y: Math.random() * screenHeight * 0.8 + screenHeight * 0.1\n      },\n      path: [],\n      turnsRemaining: MAX_TURNS,\n      lastTurnX: -SEGMENT_LENGTH\n    };\n  };\n  const [snakes] = useState([createSnake(), createSnake(), createSnake(), createSnake(), createSnake(), createSnake()]);\n  useEffect(() => {\n    const moveSnakes = () => {\n      snakes.forEach(snake => {\n        snake.position.x += snake.direction.x * SPEED;\n        snake.position.y += snake.direction.y * SPEED;\n        snake.path.push(Object.assign({}, snake.position));\n        if (snake.path.length > SNAKE_LENGTH) {\n          snake.path.shift();\n        }\n        const distanceSinceLastTurn = Math.abs(snake.position.x - snake.lastTurnX);\n        if (snake.turnsRemaining > 0 && distanceSinceLastTurn > SEGMENT_LENGTH * 8 && Math.random() < 0.003) {\n          const directions = [{\n            x: 1,\n            y: 0\n          }, {\n            x: 0,\n            y: 1\n          }, {\n            x: 0,\n            y: -1\n          }];\n          const availableDirections = directions.filter(d => d.x !== snake.direction.x || d.y !== snake.direction.y);\n          snake.direction = availableDirections[Math.floor(Math.random() * availableDirections.length)];\n          snake.turnsRemaining--;\n          snake.lastTurnX = snake.position.x;\n        }\n        if (snake.position.x > screenWidth + SEGMENT_LENGTH) {\n          snake.position.x = -SEGMENT_LENGTH;\n          snake.path = [];\n          snake.turnsRemaining = MAX_TURNS;\n          snake.lastTurnX = -SEGMENT_LENGTH;\n          snake.direction = {\n            x: 1,\n            y: 0\n          };\n          snake.position.y = Math.random() * screenHeight * 0.8 + screenHeight * 0.1;\n        }\n        snake.dots.forEach((dot, index) => {\n          const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n          dot.x.setValue(pathPoint.x);\n          dot.y.setValue(pathPoint.y);\n        });\n      });\n      requestAnimationFrame(moveSnakes);\n    };\n    moveSnakes();\n  }, []);\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: snakes.map((snake, snakeIndex) => _jsxDEV(View, {\n      children: snake.dots.map((dot, index) => _jsxDEV(Animated.View, {\n        style: [styles.dot, {\n          opacity: (SNAKE_LENGTH - index) / SNAKE_LENGTH * 0.3,\n          transform: [{\n            translateX: dot.x\n          }, {\n            translateY: dot.y\n          }]\n        }]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this))\n    }, snakeIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none'\n  },\n  dot: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    backgroundColor: '#F4E409',\n    borderRadius: 2\n  }\n});\nexport default AnimatedLines;","map":{"version":3,"names":["React","useEffect","useRef","useState","View","Animated","StyleSheet","Dimensions","jsxDEV","_jsxDEV","SEGMENT_LENGTH","SNAKE_LENGTH","SPEED","MAX_TURNS","AnimatedLines","screenWidth","get","width","screenHeight","height","createSnake","dots","Array","fill","map","x","Value","y","direction","position","Math","random","path","turnsRemaining","lastTurnX","snakes","moveSnakes","forEach","snake","push","Object","assign","length","shift","distanceSinceLastTurn","abs","directions","availableDirections","filter","d","floor","dot","index","pathPoint","max","setValue","requestAnimationFrame","style","styles","container","children","snakeIndex","opacity","transform","translateX","translateY","fileName","_jsxFileName","lineNumber","columnNumber","create","top","left","right","bottom","pointerEvents","backgroundColor","borderRadius"],"sources":["/Users/hidde/Documents/Landingpage/components/AnimatedLines.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { View, Animated, StyleSheet, Dimensions } from 'react-native';\n\nconst SEGMENT_LENGTH = 25;    // Distance between dots\nconst SNAKE_LENGTH = 35;      // Increased from 20 to 35 dots\nconst SPEED = 2.5;           // Keeping same speed\nconst MAX_TURNS = 3;         // Keeping same max turns\n\nconst AnimatedLines = () => {\n  const screenWidth = Dimensions.get('window').width;\n  const screenHeight = Dimensions.get('window').height;\n  \n  const createSnake = () => {\n    const dots = Array(SNAKE_LENGTH).fill(0).map(() => ({\n      x: new Animated.Value(-SEGMENT_LENGTH),\n      y: new Animated.Value(0),\n    }));\n    return {\n      dots,\n      direction: { x: 1, y: 0 },\n      position: { x: -SEGMENT_LENGTH, y: Math.random() * screenHeight * 0.8 + screenHeight * 0.1 },\n      path: [],\n      turnsRemaining: MAX_TURNS,\n      lastTurnX: -SEGMENT_LENGTH,\n    };\n  };\n\n  const [snakes] = useState([\n    createSnake(),\n    createSnake(),\n    createSnake(),\n    createSnake(),\n    createSnake(),\n    createSnake(),\n  ]);\n\n  useEffect(() => {\n    const moveSnakes = () => {\n      snakes.forEach(snake => {\n        // Update head position\n        snake.position.x += snake.direction.x * SPEED;\n        snake.position.y += snake.direction.y * SPEED;\n\n        // Store path point\n        snake.path.push({ ...snake.position });\n        if (snake.path.length > SNAKE_LENGTH) {\n          snake.path.shift();\n        }\n\n        // Change direction with limitations\n        const distanceSinceLastTurn = Math.abs(snake.position.x - snake.lastTurnX);\n        if (snake.turnsRemaining > 0 && \n            distanceSinceLastTurn > SEGMENT_LENGTH * 8 && // Minimum distance between turns\n            Math.random() < 0.003) {  // Reduced chance to change direction\n          const directions = [\n            { x: 1, y: 0 },   // right\n            { x: 0, y: 1 },   // down\n            { x: 0, y: -1 },  // up\n          ];\n          // Don't select current direction\n          const availableDirections = directions.filter(d => \n            d.x !== snake.direction.x || d.y !== snake.direction.y\n          );\n          snake.direction = availableDirections[Math.floor(Math.random() * availableDirections.length)];\n          snake.turnsRemaining--;\n          snake.lastTurnX = snake.position.x;\n        }\n\n        // Reset if off screen\n        if (snake.position.x > screenWidth + SEGMENT_LENGTH) {\n          snake.position.x = -SEGMENT_LENGTH;\n          snake.path = [];\n          snake.turnsRemaining = MAX_TURNS;\n          snake.lastTurnX = -SEGMENT_LENGTH;\n          snake.direction = { x: 1, y: 0 }; // Reset to moving right\n          snake.position.y = Math.random() * screenHeight * 0.8 + screenHeight * 0.1;\n        }\n\n        // Update dot positions\n        snake.dots.forEach((dot, index) => {\n          const pathPoint = snake.path[Math.max(0, snake.path.length - 1 - index)] || snake.position;\n          dot.x.setValue(pathPoint.x);\n          dot.y.setValue(pathPoint.y);\n        });\n      });\n\n      requestAnimationFrame(moveSnakes);\n    };\n\n    moveSnakes();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      {snakes.map((snake, snakeIndex) => (\n        <View key={snakeIndex}>\n          {snake.dots.map((dot, index) => (\n            <Animated.View\n              key={index}\n              style={[\n                styles.dot,\n                {\n                  opacity: (SNAKE_LENGTH - index) / SNAKE_LENGTH * 0.3,\n                  transform: [\n                    { translateX: dot.x },\n                    { translateY: dot.y },\n                  ],\n                },\n              ]}\n            />\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: 'none',\n  },\n  dot: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    backgroundColor: '#F4E409',\n    borderRadius: 2,\n  },\n});\n\nexport default AnimatedLines; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}